@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<!-- Navigation list for login/logout or register actions -->
<ul class="navbar-nav">
    @* Check if the user is signed in *@
    @if (SignInManager.IsSignedIn(User))
    {
        <!-- If the user is signed in, display a personalized greeting and logout option -->
        <li class="nav-item">
            <!-- Greeting the user and providing a link to manage their account -->
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
        </li>
        <li class="nav-item">
            <!-- Logout button that posts a request to log the user out -->
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <!-- If the user is not signed in, display options to register or log in -->
        <li class="nav-item">
            <!-- Register link for new users -->
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <!-- Login link for returning users -->
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
